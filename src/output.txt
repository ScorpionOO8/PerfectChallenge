`client/App.tsx`

```tsx
import { ChakraProvider } from '@chakra-ui/react';
import theme from './styles/theme';
import React, { useState } from 'react';
//import { Category } from '../shared/interfaces/Category';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Homepage from './pages/Homepage';
import QuizPage from './pages/QuizPage';
import ResultsPage from './pages/ResultsPage';
//import { questions } from './utils/questions';
import { habits } from './utils/habits';

const App: React.FC = () => {
  const [scores, setScores] = useState<Record<string, number>>({});

  return (
    <ChakraProvider theme={theme}>
      <Router>
        <Switch>
          <Route path="/" exact component={Homepage} />
          <Route path="/quiz" exact>
            <QuizPage onFinish={(newScores) => setScores(newScores)} />
          </Route>
          <Route path="/results" exact>
            <ResultsPage habits={habits} scores={scores} />
          </Route>
        </Switch>
      </Router>
    </ChakraProvider>
  );
};

export default App;

```

`client/MainPage.tsx`

```tsx
import waspLogo from './waspLogo.png'
//import './Main.css'

const MainPage = () => {
  return (
    <div className="container">
      <main>
        <div className="logo">
          <img src={waspLogo} alt="wasp" />
        </div>

        <h2 className="welcome-title"> Welcome to Wasp - you just started a new app! </h2>
        <h3 className="welcome-subtitle">
          This is page <code>MainPage</code> located at route <code>/</code>.
          Open <code>src/client/MainPage.jsx</code> to edit it.
        </h3>

        <div className="buttons">
          <a
            className="button button-filled"
            href="https://wasp-lang.dev/docs/tutorials/todo-app"
            target="_blank"
            rel="noreferrer noopener"
          >
            Take the Tutorial
          </a>
          <a
            className="button button-outline"
            href="https://discord.com/invite/rzdnErX"
            target="_blank"
            rel="noreferrer noopener"
          >
            Chat on Discord
          </a>
        </div>
      </main>
    </div>
  )
}
export default MainPage

```

`client/components/Quiz.tsx`

```tsx
import React, { useState } from 'react';
import { Box, Button, FormControl, FormLabel, Radio, RadioGroup, VStack } from '@chakra-ui/react';
import { Question } from '../../Shared/interfaces/Question';

interface QuestionFormProps {
  question: Question;
  onAnswered: (answer: number) => void;
}

const QuestionForm: React.FC<QuestionFormProps> = ({ question, onAnswered }) => {
  const [selectedAnswer, setSelectedAnswer] = useState<number>(1);

  const handleAnswer = () => {
    onAnswered(selectedAnswer);
  };

  return (
    <Box>
      <FormControl as="fieldset">
        <FormLabel as="legend">{question.text}</FormLabel>
        <RadioGroup value={selectedAnswer} onChange={(value: string) => setSelectedAnswer(parseInt(value))}>
          <VStack spacing={2}>
            <Radio value={1}>1</Radio>
            <Radio value={2}>2</Radio>
            <Radio value={3}>3</Radio>
            <Radio value={4}>4</Radio>
            <Radio value={5}>5</Radio>
          </VStack>
        </RadioGroup>
        <Button colorScheme="teal" mt={4} onClick={handleAnswer}>Submit</Button>
      </FormControl>
    </Box>
  );
};

interface QuizProps {
  question: Question;
  onAnswered: (answer: number) => void;
  onQuizFinished: () => void;
}

const Quiz: React.FC<QuizProps> = ({ question, onAnswered, onQuizFinished }) => {
  const handleAnswered = (answer: number) => {
    onAnswered(answer);

    if (question.category === 'organization') { // Check if this is the last question
      onQuizFinished();
    }
  };

  return (
    <QuestionForm question={question} onAnswered={handleAnswered} />
  );
};

export default Quiz;

```

`client/components/Results.tsx`

```tsx
import React from 'react';
import { Box, Text, VStack, SimpleGrid } from '@chakra-ui/react';
//import { Habit } from '../../Shared/interfaces/Habit';
import { habits } from '../utils/habits';

interface ResultsProps {
  scores: Record<string, number>;
  topImprovementAreas: string[];
}

const Results: React.FC<ResultsProps> = ({ scores, topImprovementAreas }) => {
  const selectedHabits = habits.filter((habit) => topImprovementAreas.includes(habit.category));

  return (
    <VStack spacing={4} width="100%">
      <Text>Your custom 30-day challenge includes the following habits:</Text>
      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
        {selectedHabits.map((habit, index) => (
          <Box
            key={index}
            p={4}
            borderWidth={1}
            borderRadius="lg"
            boxShadow="md"
            width="100%"
          >
            <Text fontWeight="bold">{habit.category}</Text>
            <Text>{habit.options.join(', ')}</Text>
          </Box>
        ))}
      </SimpleGrid>
    </VStack>
  );
};

export default Results;


```

`client/index.tsx`

```tsx
import React from 'react';
import ReactDOM from 'react-dom';
import { ChakraProvider, CSSReset } from '@chakra-ui/react';
import App from './App';
import theme from './styles/theme';

ReactDOM.render(
  <React.StrictMode>
    <ChakraProvider theme={theme}>
      <CSSReset />
      <App />
    </ChakraProvider>
  </React.StrictMode>,
  document.getElementById('root')
);

```

`client/pages/Homepage.tsx`

```tsx
import React from 'react';
import { Box, Button, Container, Heading, Text } from '@chakra-ui/react';
import { useHistory } from 'react-router-dom';

import { questions } from '../utils/questions';

const Homepage: React.FC = () => {
  console.log(questions); // add this line to log the questions array to the console


  const history = useHistory();

  const onStartQuiz = () => {
    history.push('/quiz');
  };

  return (
    <Container maxW="container.md" centerContent>
      <Box textAlign="center">
        <Heading mb={6}>Welcome to Perfect Challenge!</Heading>
        <Text mb={6}>
          Take a short quiz to find your weaknesses, and we'll create a
          custom 30-day self-improvement challenge for you.
        </Text>
        <Button colorScheme="teal" onClick={onStartQuiz}>
          Start Quiz
        </Button>
      </Box>
    </Container>
  );
};

export default Homepage;
     

```

`client/pages/QuizPage.tsx`

```tsx
import React, { useState } from 'react';
import { Box, Button, Container, Heading, VStack } from '@chakra-ui/react';
import { useHistory } from 'react-router-dom';
import Quiz from '../components/Quiz';
import { questions } from '../utils/questions';

interface QuizPageProps {
  onFinish: (scores: Record<string, number>) => void;
}

const QuizPage: React.FC<QuizPageProps> = ({ onFinish }) => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const history = useHistory();

  const handleAnswered = (answer: number) => {
    setAnswers([...answers, answer]);

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    }
  };

  const handleQuizFinish = (newScores: Record<string, number>) => {
    console.log('handleQuizFinish called:', onFinish);
    onFinish(newScores);
    history.push('/results');
  };

  const calculateScores = (answers: number[]): Record<string, number> => {
    const scores: Record<string, number> = {};
  
    questions.forEach((question, index) => {
      const category = question.category;
      const answer = answers[index];
  
      if (scores[category]) {
        scores[category] += answer;
      } else {
        scores[category] = answer;
      }
    });
  
    // Get top 4 categories with highest scores
    const sortedScores = Object.entries(scores).sort((a, b) => b[1] - a[1]).slice(0, 4);
    const topCategories = sortedScores.map(([category]) => category);
  
    // Filter questions by top categories and get their indices
    const topQuestionsIndices = questions.reduce((acc: number[], question, index) => {
      if (topCategories.includes(question.category)) {
        acc.push(index);
      }
      return acc;
    }, []);
  
    // Get the questions for the top categories
    const topQuestions = topQuestionsIndices.map(index => questions[index]);
  
    // Create a new scores object with only the scores for the top categories
    const newScores: Record<string, number> = {};
    topQuestions.forEach((question, index) => {
      const category = question.category;
      const answer = answers[topQuestionsIndices[index]];
      if (newScores[category]) {
        newScores[category] += answer;
      } else {
        newScores[category] = answer;
      }
    });
  
    return newScores;
  };
  
  return (
    <Container maxW="container.md" centerContent>
      <Box textAlign="center">
        <Heading mb={6}>Quiz</Heading>
        <VStack spacing={6}>
        <Quiz
          question={questions[currentQuestionIndex]}
          onAnswered={handleAnswered}
          onQuizFinished={() => handleQuizFinish(calculateScores(answers))}
        />
        </VStack>
      </Box>
    </Container>
  );
};

export default QuizPage;

```

`client/pages/ResultsPage.tsx`

```tsx
import React from 'react';
import { Box, Button, Container, Heading, VStack } from '@chakra-ui/react';
import { useHistory } from 'react-router-dom';
import Results from '../components/Results';
import { Habit } from '../../Shared/interfaces/Habit';

interface ResultsPageProps {
  habits: Habit[];
  scores: Record<string, number>;
}

const ResultsPage: React.FC<ResultsPageProps> = ({ habits, scores }) => {
  const history = useHistory();

  const handleRestartQuiz = () => {
    history.push('/quiz');
  };

  const getTopImprovementAreas = (scores: Record<string, number>): string[] => {
    const sortedCategories = Object.entries(scores).sort(([, a], [, b]) => b - a);
    return sortedCategories.slice(0, 4).map(([category]) => category);
  };

  const topImprovementAreas = getTopImprovementAreas(scores);

  return (
    <Container maxW="container.md" centerContent>
      <Box textAlign="center">
        <Heading mb={6}>Your 30-Day Challenge</Heading>
        <VStack spacing={6}>
          <Results scores={scores} topImprovementAreas={topImprovementAreas} />
          <Button colorScheme="teal" onClick={handleRestartQuiz}>
            Restart Quiz
          </Button>
        </VStack>
      </Box>
    </Container>
  );
};

export default ResultsPage;


```

